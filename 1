#include<stdio.h>
#include <unistd.h>
#include <sys/socket.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <string.h>
#include <math.h>
#include <gmp.h>
#include "comm.h"
#include "ppmtlutils.h"
#include "secure_vector_computations.h"
//Assumption - init()|init_serv() has been called earlier before calling this function.
int ppmtl_mpz_prod_paillier(mpz_t rop, const mpz_t op1, const mpz_t op2)
{
	mpz_mul(rop, op1, op2);
	mpz_mod(rop, rop, n_square);
}

int compute_encr_norm2(long m, long p, char *cl_recv_file_name, char *op_encr_norm2_file_name)
{
	FILE *fp;
	int err = 0;
	long count = 0;
	mpz_t m_val;
	mpz_t norm2;

	if ( (fp = fopen(cl_recv_file_name, "r")) == NULL )
	{
		fprintf(stderr, "%s:%d:: ERROR! Cannot open file:%s\n", __func__, __LINE__, cl_recv_file_name);
		err = -1;
		goto clean_up;
	}

	mpz_init(m_val);
	mpz_init(norm2);

	//the file to read is a csv file of big numbers,
	//it is arranged as p x m, where, p - no. of features/rows and
	//m - no. of clients/columns.
	count = 0;
	while ( ( err = gmp_fscanf(fp, "%Zd,", m_val))!=0/*Something parsed*/ && (err != EOF) )
	{
		//gmp_printf("%d>\tValue parsed:%Zd\n", count++, m_val);//debug
		//each row i contains m (i.e. 0 to m-1) encrypted debiased lasso for m clients
		//to calculate norm for each feature/row and put it in file
		if ( (count % m) == 0 )
		{
			//reset the norm2 to 0 for new row
			encrypt(norm2, 0);
		}
		//take product to obtain sum of plaintexts using the
		//additive homomorphic properties
		ppmtl_mpz_prod_paillier(norm2, norm2, m_val);

		if ( (count % m) == (m-1) )
		{
			//Now we have obtained the encrypted norm2 for the 
			//row. Dump this to the output file provided.
			//Align each norm2 on a new row, as row corresponds
			//to features and we have p features and hence,
			//p norm 2s, i.e. avoid comma as delimiter and use newline
			//'\n'.
		}
		
		count++;
	}

	err = 0;
clean_up:
	if ( fp )
	{
		fclose(fp);
	}
	if ( m_val )
	{
		mpz_clear(m_val);
	}
	if ( norm2 )
	{
		mpz_clear(norm2);
	}
	return err;
}

int main(int argc, char const *argv[])
{
	int /*server_fd,*/ valread, err = 0;
	char buffer[1024] = {0};
	char *hello = "Hello from server";
	int cl_s1_socket;
	char cl_recv_file_name[1024];
	char op_encr_norm2_file_name[1024];
	char *public_key_file_name = NULL;
	char working_dir[1024];
	long m, p;


	if ( argc != 3 )
	{
		fprintf(stderr, "%s:%d:: ERROR! Usage:\n%s <public_key_file> <working_dir>\n", __func__, __LINE__, argv[0]);
		return -1;
	}

	public_key_file_name = (char *)argv[1];
	strncpy(g_key_file_name, public_key_file_name, sizeof(g_key_file_name));//Copy the public key file name - to be used later
	strncpy(working_dir, argv[2], strlen(argv[2])>sizeof(working_dir)?
	sizeof(working_dir):strlen(argv[2])+1);
	memset(cl_recv_file_name, 0, sizeof(cl_recv_file_name));
	strcpy(cl_recv_file_name, working_dir);

	if ( (err = append_file_name_to_directory(cl_recv_file_name, sizeof(cl_recv_file_name), ENCR_DEB_LASSO_FRM_CL_FNAME)) != 0 )
	{
		fprintf(stderr, "%s:%d:: ERROR! appending err:%d\n", __func__, __LINE__, err);
		goto clean_up;
	}

	if ( (cl_s1_socket = create_accept_socket_server(C_TO_S1_PORT_NO)) < 0 )
	{
		fprintf(stderr, "%s:%d:: ERROR! return:%d\n", __func__, cl_s1_socket);
		return -1;
	}
	
	if ( (err = recv_file(cl_s1_socket, cl_recv_file_name, (char *)argv[0])) !=0 )
	{
		fprintf(stderr, "%s:%d:: ERROR!!! Cannot receive file!\n", __func__, __LINE__);
		return -2;
	}
	printf("[%s]: Received encr. deb. lasso sq. from client\n", argv[0]);
	//valread = read( new_socket , buffer, 1024);
	//printf("%s\n",buffer );
	//send(new_socket , hello , strlen(hello) , 0 );
	//printf("Hello message sent\n");

	//Accept m
	if ( (err = recv_long(cl_s1_socket, &m)) != 0 )
	{
		fprintf(stderr, "%s:%d:: [%s] ERROR! Cannot receive m, err:%d!\n", __func__, __LINE__, argv[0], err);
		return -4;
	}
	printf("[%s] Received m:%lu from clients!\n", argv[0], m);

	//Accept p
	if ( (err = recv_long(cl_s1_socket, &p)) != 0 )
	{
		fprintf(stderr, "%s:%d:: [%s] ERROR! Cannot receive p, err:%d!\n", __func__, __LINE__, argv[0], err);
		return -5;
	}
	printf("[%s] Received p:%lu from clients!\n", argv[0], p);

	//Compute the encrypted norm 2 for each feature i, 0<=i<p
	memset(op_encr_norm2_file_name, 0, sizeof(op_encr_norm2_file_name));
	strcpy(op_encr_norm2_file_name, working_dir);

	if ( (err = append_file_name_to_directory(op_encr_norm2_file_name, sizeof(op_encr_norm2_file_name), ENCR_DEB_LASSO_NORM2)) != 0 )
	{
		fprintf(stderr, "%s:%d:: ERROR! appending err:%d\n", __func__, __LINE__, err);
		goto clean_up;
	}

	//we require secure operations from this stage onwards, initialize
	//Paillier variables
	init();
	if ( (err = compute_encr_norm2(m, p, cl_recv_file_name, op_encr_norm2_file_name)) != 0 )
	{
		fprintf(stderr, "%s:%d:: ERROR! return:%d\n", __func__, err);
		return -3;
	}
	printf("[%s] Computed norm 2!\n", argv[0]);



clean_up:
	clear();
	if ( cl_s1_socket )
	{
//		(shutdown(cl_s1_socket, SHUT_RDWR)==-1)?
//			fprintf(stderr, "%s:%d:: Cannot close socket! errno:%d", errno):
//			printf("[%s] Closed the connection with client!\n", argv[0]);
	}

	return 0;
}
